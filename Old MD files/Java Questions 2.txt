https://www.geeksforgeeks.org/java-interview-questions/?ref=lbp


1. Is Java Platform Independent? If yes, how?  
2. What are the top Java Features?  
3. What is JVM?  
4. What is JIT?  
5. What are Memory storages available with JVM?  
6. What is a classloader?  
7. Difference between JVM, JRE, and JDK.  
8. What are the differences between Java and C++?  
9. Explain `public static void main(String args[])` in Java.  
10. What is Java String Pool?  
11. What will happen if we don’t declare the main method as static?  
12. What are Packages in Java?  
13. Why are Packages used?  
14. What are the advantages of Packages in Java?  
15. How many types of packages are there in Java?  
16. Explain different data types in Java.  
17. When is a byte datatype used?  
18. Can we declare Pointers in Java?  
19. What is the default value of byte datatype in Java?  
20. What are the default values of float and double datatype in Java?  
21. What is the Wrapper class in Java?  
22. Why do we need wrapper classes?  
23. Differentiate between instance and local variables.  
24. What are the default values assigned to variables and instances in Java?  
25. What is a Class Variable?  
26. What is the default value stored in Local Variables?  
27. Explain the difference between instance variable and class variable.  
28. What is a static variable?  
29. What is the difference between `System.out`, `System.err`, and `System.in`?  
30. What do you understand by an IO stream?  
31. What is the difference between the Reader/Writer class hierarchy and the InputStream/OutputStream class hierarchy?  
32. What are the super most classes for all the streams?  
33. What are FileInputStream and FileOutputStream?  
34. What is the purpose of using BufferedInputStream and BufferedOutputStream classes?  
35. What are FilterStreams?  
36. What is an I/O filter?  
37. How many ways can you take input from the console?  
38. Difference in the use of `print`, `println`, and `printf`.  
39. What are operators?  
40. How many types of operators are available in Java?  
41. Explain the difference between `>>` and `>>>` operators.  
42. Which Java operator is right associative?  
43. What is the dot operator?  
44. What is covariant return type?  
45. What is the transient keyword?  
46. What’s the difference between the methods `sleep()` and `wait()`?  
47. What are the differences between String and StringBuffer?  
48. What are the differences between StringBuffer and StringBuilder?  
49. Which among String or StringBuffer should be preferred when there are a lot of updates to the data?  
50. Why is StringBuffer called mutable?
51. How is the creation of a String using `new()` different from that of a literal?  
52. What is an array in Java?  
53. On which memory are arrays created in Java?  
54. What are the types of an array?  
55. Why does the Java array index start with 0?  
56. What is the difference between `int array[]` and `int[] array`?  
57. How to copy an array in Java?  
58. What do you understand by the jagged array?  
59. Is it possible to make an array volatile?  
60. What are the advantages and disadvantages of an array?  
61. What is an object-oriented paradigm?  
62. What are the main concepts of OOPs in Java?  
63. What is the difference between an object-oriented programming language and an object-based programming language?  
64. How is the `new` operator different from the `newInstance()` operator in Java?  
65. What are Classes in Java?  
66. What is the difference between a static (class) method and an instance method?  
67. What is the `this` keyword in Java?  
68. What are brief Access Specifiers and Types of Access Specifiers?  
69. What will be the initial value of an object reference which is defined as an instance variable?  
70. What is an object?  
71. What are the different ways to create objects in Java?  
72. What are the advantages and disadvantages of object cloning?  
73. What are the advantages of passing `this` into a method instead of the current class object itself?  
74. What is the constructor?  
75. What happens if you don’t provide a constructor in a class?  
76. How many types of constructors are used in Java?  
77. What is the purpose of a default constructor?  
78. What do you understand by a copy constructor in Java?  
79. Where and how can you use a private constructor?  
80. What are the differences between constructors and methods?  
81. What is an Interface?  
82. Give some features of the Interface.  
83. What is a marker interface?  
84. What are the differences between abstract class and interface?  
85. What do you mean by data encapsulation?  
86. What are the advantages of Encapsulation in Java?  
87. What is the primary benefit of Encapsulation?  
88. What do you mean by aggregation?  
89. What is the ‘IS-A’ relationship in OOPs Java?  
90. Define Inheritance.  
91. What are the different types of inheritance in Java?  
92. What is multiple inheritance? Is it supported by Java?  
93. How is inheritance in C++ different from Java?  
94. Is there any limitation to using Inheritance?  
95. Although inheritance is a popular OOPs concept, it is less advantageous than composition. Explain.  
96. What is an association?  
97. What do you mean by aggregation?  
98. What is the composition of Java?  
99. State the difference between Composition and Aggregation.  
100. Can the constructor be inherited?  
101. What is Polymorphism?  
102. What is runtime polymorphism or dynamic method dispatch?  
103. What is method overriding?  
104. What is method overloading?  
105. Can we override the static method?  
106. Can we override the overloaded method?  
107. Can we overload the `main()` method?  
108. What are method overloading and method overriding?  
109. Can we override the private methods?  
110. Can we change the scope of the overridden method in the subclass?
111. Can we modify the `throws` clause of the superclass method while overriding it in the subclass?  
112. Can you have virtual functions in Java?  
113. What is Abstraction?  
114. What is an Abstract class?  
115. When are Abstract methods used?  
116. How can you avoid serialization in the child class if the base class is implementing the Serializable interface?  
117. What is the Collection Framework in Java?  
118. Explain various interfaces used in the Collection framework.  
119. How can you synchronize an ArrayList in Java?  
120. Why do we need a synchronized ArrayList when we have Vectors (which are synchronized) in Java?  
121. Why can’t we create a generic array?  
122. Can you explain how elements are stored in memory for both regular arrays and ArrayLists in Java?  
123. Explain the method to convert ArrayList to Array and Array to ArrayList.  
124. How does the size of ArrayList grow dynamically? And how is it implemented internally?  
125. What is a Vector in Java?  
126. How to make Java ArrayList Read-Only?  
127. What is a priority queue in Java?  
128. Explain the LinkedList class.  
129. What is the Stack class in Java, and what are the various methods provided by it?  
130. What is Set in the Java Collections framework, and list down its various implementations?  
131. What is the HashSet class in Java, and how does it store elements?  
132. What is LinkedHashSet in the Java Collections Framework?  
133. What is a Map interface in Java?  
134. Explain TreeMap in Java.  
135. What is EnumSet?  
136. What is BlockingQueue?  
137. What is the ConcurrentHashMap in Java, and how do you implement it?  
138. Can you use any class as a Map key?  
139. What is an Iterator?  
140. What is an enumeration?  
141. What is the difference between Collection and Collections?  
142. Differentiate between Array and ArrayList in Java.  
143. What is the difference between Array and Collection in Java?  
144. Difference between ArrayList and LinkedList.  
145. Differentiate between ArrayList and Vector in Java.  
146. What is the difference between Iterator and ListIterator?  
147. Differentiate between HashMap and Hashtable.  
148. What is the difference between Iterator and Enumeration?  
149. What is the difference between Comparable and Comparator?  
150. What is the difference between Set and Map?  
151. Explain the FailFast iterator and FailSafe iterator along with examples for each.  
152. What is Exception Handling?  
153. How many types of exceptions can occur in a Java program?  
154. Difference between an Error and an Exception.  
155. Explain the hierarchy of Java Exception classes.  
156. Explain Runtime Exceptions.  
157. What is NullPointerException?  
158. When is the ArrayStoreException thrown?  
159. What is the difference between Checked Exception and Unchecked Exception?  
160. What is the base class for Error and Exception?  
161. Is it necessary that each try block must be followed by a catch block?  
162. What is exception propagation?  
163. What will happen if you put `System.exit(0)` on the try or catch block? Will finally block execute?  
164. What do you understand by Object Cloning, and how do you achieve it in Java?  
165. How do exceptions affect the program if it doesn’t handle them?  
166. What is the use of the `final` keyword?  
167. What purpose do the keywords `final`, `finally`, and `finalize` fulfill?  
168. What is the difference between `this()` and `super()` in Java?  
169. What is multitasking?  
170. What do you mean by a Multithreaded program?  
171. What are the advantages of multithreading?  
172. What are the two ways in which a Thread can be created?  
173. What is a thread?  
174. Differentiate between process and thread.  
175. Describe the life cycle of the thread.  
176. Explain the `suspend()` method under the Thread class.  
177. Explain the main thread under Thread class execution.  
178. What is a daemon thread?  
179. What are the ways in which a thread can enter the waiting state?  
180. How does multi-threading take place on a computer with a single CPU?
181. What are the different types of Thread Priorities in Java? And what is the default priority of a thread assigned by JVM?  
182. Why is Garbage Collection necessary in Java?  
183. What is the drawback of Garbage Collection?  
184. Explain the difference between a minor, major, and full garbage collection.  
185. How will you identify major and minor garbage collections in Java?  
186. What is a memory leak, and how does it affect garbage collection?  
187. Name some classes present in the `java.util.regex` package.  
188. Write a regular expression to validate a password. A password must start with an alphabet and be followed by alphanumeric characters; its length must be between 8 to 20.  
189. What is JDBC?  
190. What is a JDBC Driver?  
191. What are the steps to connect to the database in Java?  
192. What are the JDBC API components?  
193. What is the JDBC Connection interface?  
194. What does the JDBC ResultSet interface do?  
195. What is the JDBC Rowset?  
196. What is the role of the JDBC DriverManager class?  
197. Differentiate between Iterable and Iterator.  
198. Differentiate between List and Set.  
199. Differentiate between List and Map.  
200. Differentiate between Queue and Stack.  
201. Differentiate between PriorityQueue and TreeSet.  
202. Differentiate between Singly Linked List and Doubly Linked List.  
203. Differentiate between FailFast and FailSafe.  
204. Differentiate between HashMap and TreeMap.  
205. Differentiate between Queue and Deque.  
206. Differentiate between HashSet and TreeSet.