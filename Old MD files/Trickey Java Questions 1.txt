List of tricky Java Core questions that focus on nuances, edge cases, and concepts that often trip up developers:

---

1. OOP Concepts
1. Can you override a private or static method in Java? Why or why not?
2. What is the "diamond problem" in inheritance, and how does Java resolve it with interfaces?
3. Explain the difference between "IS-A" and "HAS-A" relationships in Java. Provide examples.
4. What happens if a constructor throws an exception? Does the object get created?
5. Can you call a constructor of a class multiple times for the same object? Why or why not?

---

2. Exception Handling
1. What happens if a `finally` block contains a `return` statement? Does it override exceptions thrown in the `try` block?
2. Explain the difference between `throw` and `throws`. Can you use `throws` with a `RuntimeException`?
3. Can you catch an exception thrown in the `static` block of a class? Why or why not?
4. What happens if an exception is thrown in the `catch` block? Does the `finally` block execute?

---

3. Java Memory Model
1. What is the difference between stack memory and heap memory? Where are `static` variables stored?
2. Explain the lifecycle of an object in the JVM from creation to garbage collection.
3. What is the purpose of the `finalize()` method? Why is it deprecated in Java?
4. Can you prevent an object from being garbage collected? If so, how?
5. What is a memory leak in Java? Give examples of code that could lead to memory leaks.

---

4. Multithreading and Concurrency
1. What is the difference between a `synchronized` block and a `synchronized` method? Which is more efficient?
2. How does the `volatile` keyword ensure thread safety? Does it guarantee atomicity?
3. Explain the difference between `wait()`, `notify()`, and `notifyAll()`. Why are they part of `Object` and not `Thread`?
4. What is a "race condition"? How can it be avoided in Java?
5. Can a `Thread` start twice? What happens if you call `start()` on a thread that has already started?

---

5. Collections Framework
1. How does `HashMap` handle hash collisions? What is the difference between chaining and open addressing?
2. Why is `HashMap` not thread-safe? How does `ConcurrentHashMap` resolve this?
3. What is the difference between `Comparable` and `Comparator`? Can a class implement both?
4. What is the difference between `IdentityHashMap` and `HashMap`?
5. Why are `ArrayList` and `LinkedList` not synchronized? How can you make them thread-safe?

---

6. Strings and Immutability
1. Why is the `String` class immutable in Java? What are the benefits of immutability?
2. What is the difference between `String`, `StringBuilder`, and `StringBuffer`?
3. Can two different `String` objects with the same value have different hash codes?
4. What is the difference between `==` and `.equals()` when comparing strings?
5. How does the `intern()` method work in the `String` class?

---

7. Class Loading and Initialization
1. What are the differences between `static` and instance initialization blocks?
2. What is the order of execution for `static` blocks, instance blocks, and constructors?
3. What are the different types of class loaders in Java? How do they work?
4. What happens if a static variable is accessed before the class is loaded?
5. Explain the difference between eager and lazy initialization. Provide examples.

---

8. Advanced Topics
1. What is the difference between shallow copy and deep copy? How do you implement them in Java?
2. How does the `clone()` method work? Why is it discouraged in modern Java?
3. What is the difference between `SoftReference`, `WeakReference`, and `PhantomReference` in Java?
4. Explain the `transient` and `volatile` keywords. How are they different?
5. Can you serialize a class with a static variable? What happens to the static variable after deserialization?

---

9. Java Keywords and Modifiers
1. What is the difference between `final`, `finally`, and `finalize()`?
2. Can you use the `abstract` keyword with a constructor? Why or why not?
3. Can an `interface` extend a `class`? Why or why not?
4. What happens if you declare a method `native`? When would you use it?
5. Can a `final` method be overloaded? Why or why not?

---

10. Miscellaneous
1. What is the difference between `System.out`, `System.err`, and `System.in`?
2. How is a `HashSet` implemented internally? Why does it not allow duplicates?
3. Explain why `Enum` is a special type of class in Java. How does it handle singleton behavior?
4. What is the difference between `pass by value` and `pass by reference`? Is Java pass-by-reference?
5. What are "zombie objects" in Java? How can they occur?

---

Example Tricky Question Breakdown: 
Q: What happens if you override the `hashCode()` method but not the `equals()` method?  
- Answer: If you override `hashCode()` but not `equals()`, two objects may have the same hash code but be considered unequal based on the default implementation of `equals()` in `Object`. This can lead to unexpected behavior in collections like `HashMap` and `HashSet`, where logical equality is not respected.

---